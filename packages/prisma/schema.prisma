datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  role                String          @default("user")
  pending_amount      BigInt          @default(0)
  locked_amount       BigInt          @default(0)

  projects            ProjectUsers[]
  wallets             Wallet[]
  accounts            Account[]
  sessions            Session[]
  tasks               Task[]
  approvals           Approval[]
  escrows             Escrow[]
  payments            Payment[]
  transfersSender     Transfer[]      @relation(name: "TransferSender")
  transfersReceiver   Transfer[]      @relation(name: "TransferReceiver")

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}
 
model Account {
  id                  String    @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  expires_at          BigInt?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
 
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id            String      @id @default(cuid())
  sessionToken  String      @unique
  userId        String
  expires       DateTime

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  slug        String          @unique
  logo        String?

  users       ProjectUsers[]
  tasks       Task[]

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum Role {
  owner
  member
}

model ProjectUsers {
  id            String      @id @default(cuid())
  role          Role        @default(member)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String
  project       Project     @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id    String

  @@unique([user_id, project_id])
  @@index([project_id])
}

model Wallet {
  id            String      @id @default(uuid())
  user_id       String
  user          User        @relation(fields: [user_id], references: [id])
  publicKey     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt    @default(now())

  @@unique([publicKey])
}

model Task {
  id           String       @id @default(uuid())
  title        String?      @default("Github PR")
  contact      String
  proof        String
  amount       BigInt
  status       TaskStatus   @default(Pending)
  transfer     Transfer?
  approval     Approval?
  user_id      String
  user         User         @relation(fields: [user_id], references: [id])
  project_id   String
  project      Project      @relation(fields: [project_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt    @default(now())
}

model Approval {
  id            String      @id @default(uuid())
  user_id       String  
  user          User        @relation(fields: [user_id], references: [id])
  task_id       String      @unique
  task          Task        @relation(fields: [task_id], references: [id])
  status        TaskStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt    @default(now())
}

model Transfer {
  id              String    @id @default(uuid())
  sender_id       String
  sender          User      @relation(name: "TransferSender", fields: [sender_id], references: [id])
  receiver_id     String
  receiver        User      @relation(name: "TransferReceiver", fields: [receiver_id], references: [id])
  task_id         String    @unique
  task            Task      @relation(fields: [task_id], references: [id])
  amount          BigInt
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt    @default(now())
}

model Payment {
  id            String       @id @default(uuid())
  user_id       String?
  user          User?        @relation(fields: [user_id], references: [id])
  amount        BigInt
  signature     String       @unique
  status        TxnStatus
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt   @default(now())
}

model Escrow {
  id            String      @id @default(uuid())
  user_id       String
  user          User        @relation(fields: [user_id], references: [id])
  amount        BigInt
  signature     String      @unique
  status        TxnStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt    @default(now())
}

enum TxnStatus {
  Processing
  Success
  Failure
}

enum TaskStatus {
  Pending
  Approved
  Rejected
  Paid
}

model Indexer {
  id              String @id @default(cuid())
  transaction     Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}